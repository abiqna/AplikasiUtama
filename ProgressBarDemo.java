/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package progressbar;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.lang.Thread;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import java.util.Random;
import javax.swing.BorderFactory;
import static javax.swing.JFrame.EXIT_ON_CLOSE;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.Timer;
import javax.swing.border.Border;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;

/**
 *
 * @author abi
 */
public class ProgressBarDemo extends javax.swing.JFrame {

    public int nilaiAkhir;
    private Timer timerProgress;

    /**
     * Creates new form ProgressBarDemo
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customPanel1 = new progressbar.CustomPanel();
        customPanel2 = new progressbar.CustomPanel();
        jButton1 = new javax.swing.JButton();
        btn_WB = new javax.swing.JButton();
        btn_VidS = new javax.swing.JButton();
        btn_AS = new javax.swing.JButton();
        btn_VC = new javax.swing.JButton();
        btn_VoC = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Layanan = new javax.swing.JLabel();
        jp_progress = new progressbar.CustomPanel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_WB.setText("Web Browsing");
        btn_WB.setToolTipText("Mengakses www.google.com");
        btn_WB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_WBActionPerformed(evt);
            }
        });

        btn_VidS.setText("Video Streaming");
        btn_VidS.setToolTipText("Mengakses www.youtube.com");
        btn_VidS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_VidSActionPerformed(evt);
            }
        });

        btn_AS.setText("Audio Streaming");
        btn_AS.setToolTipText("Mengakses www.spotify.com");
        btn_AS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ASActionPerformed(evt);
            }
        });

        btn_VC.setText("Video Call");
        btn_VC.setToolTipText("Mengakses hangouts.google.com");
        btn_VC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_VCActionPerformed(evt);
            }
        });

        btn_VoC.setText("Voice Call");
        btn_VoC.setToolTipText("Mengakses hangouts.google.com");
        btn_VoC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_VoCActionPerformed(evt);
            }
        });

        jLabel1.setText("|           Buruk          |          Sedang         |           Bagus          |  Sangat Bagus  |");

        jLabel2.setText("Pilih Layanan:");

        Layanan.setText("              ");

        javax.swing.GroupLayout jp_progressLayout = new javax.swing.GroupLayout(jp_progress);
        jp_progress.setLayout(jp_progressLayout);
        jp_progressLayout.setHorizontalGroup(
            jp_progressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );
        jp_progressLayout.setVerticalGroup(
            jp_progressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Layanan)
                    .addComponent(btn_VoC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_VC, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(btn_AS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_VidS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_WB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(100, 100, 100)
                        .addComponent(jp_progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, progressBar});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_AS, btn_VC, btn_VidS, btn_VoC, btn_WB});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btn_WB)
                        .addGap(10, 10, 10)
                        .addComponent(btn_VidS, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btn_AS, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btn_VC)
                        .addGap(10, 10, 10)
                        .addComponent(btn_VoC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Layanan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addComponent(jp_progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)))
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(15, 15, 15))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, progressBar});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btn_AS, btn_VC, btn_VidS, btn_VoC, btn_WB});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_WBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_WBActionPerformed
        timerProgress.start();
        new Thread(new Runnable() {
            @Override
            public void run() {
                Layanan.setText("");
                progressBar.setValue(0);
                jp_progress.UpdateProgress(0);
                jp_progress.repaint();
                jp_progress.setVisible(true);
                String[] barisOutput = new String[200]; //output dari eksekusi perintah terminal disimpan dalam barisOutput[]
                String keyPL = ".*packets.*", keyDelay = ".*rtt.*"; //kata kunci untuk mencari nilai packet loss dan nilai delay
                char[] dataTunggalPL = new char[5], dataTunggalDelay = new char[10]; //data nilai packet loss dan data nilai delay dalam bentuk char tunggal 
                int[] integerPL = new int[5], integerDelay = new int[10], nilaiPL = new int[11]; //nilai dataTunggalPL, dataTunggalDelay dalam integer dan nilai packet loss setiap eksekusi perintah terminal
                float[] nilaiDelay = new float[11]; //nilai delay dari setiap eksekusi perintah terminal
                boolean firstDigitPL, secondDigitPL, thirdDigitPL; //untuk mengecek dataTunggalPL berupa integer atau bukan
                boolean[] digitDelay = new boolean[10]; //untuk mengecek dataTunggalDelay berupa integer atau bukan
                float totalDelay = 0, delay;
                int packetLoss, totalPL = 0, indeksPL = 0, indeksDelay = 0, succed = 0;
                Random angkaRandom = new Random();
                for (int a = 1; a <= 10; a++) { //perintah terminal dijalankan 10 kali, artinya web browsing dijalankan sebanyak 10 kali
                    ProcessBuilder processBuilder = new ProcessBuilder();
                    processBuilder.command("bash", "-c", "sudo ping www.google.com -s 60 -c 167 -i 0.0059"); //perintah terminal untuk web browsing
                    try {
                        Process process = processBuilder.start();
                        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        for (int b = 1; b <= 172; b++) { //output dari eksekusi terminal sebanyak 172 baris, artinya b[172]
                            barisOutput[b] = reader.readLine(); //setiap baris output dimasukkan ke barisOutput[b]
                            if (barisOutput[b] != null) {
                                boolean kondisiPL = Pattern.matches(keyPL, barisOutput[b]); //dicari kata kunci 'packets' di setiap baris outputnya
                                boolean kondisiDelay = Pattern.matches(keyDelay, barisOutput[b]); //dicari kata kunci 'rtt' di setiap baris outputnya
                                if (kondisiPL == true) { //jika ditemukan kata 'packets' di baris outputnya, maka
                                    succed++;
                                    int indexPersen = barisOutput[b].indexOf("%"); //mencari index karakter % dari barisOutput[b] tersebut
                                    int firstIndexPL = indexPersen - 3; //index paling awal yang berpeluang menjadi index dari nilai packet loss
                                    while (firstIndexPL < indexPersen) { //pengambilan data nilai integer saja dari index yang berpeluang menjadi nilai packet loss tersebut 
                                        dataTunggalPL[1] = barisOutput[b].charAt(firstIndexPL); //mengambil setiap karakter(dataPL) dari IndexPL sampai IndexPersen-1
                                        dataTunggalPL[2] = barisOutput[b].charAt(firstIndexPL + 1);
                                        dataTunggalPL[3] = barisOutput[b].charAt(firstIndexPL + 2);
                                        firstDigitPL = Character.isDigit(dataTunggalPL[1]); //cek apakah karakter(dataTunggalPL[]) tersebut merupakan integer atau bukan
                                        secondDigitPL = Character.isDigit(dataTunggalPL[2]);
                                        thirdDigitPL = Character.isDigit(dataTunggalPL[3]);
                                        if (firstDigitPL == true) { //jika index pertama merupakan integer yg berarti nilai packet loss berupa tiga digit (ratusan), maka
                                            integerPL[1] = Character.getNumericValue(dataTunggalPL[1]); //ketiga digit tersebut (char) diubah ke (int) 
                                            integerPL[2] = Character.getNumericValue(dataTunggalPL[2]);
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]);
                                            nilaiPL[a] = (100 * integerPL[1]) + (10 * integerPL[2]) + (integerPL[3]); //nilai packet loss ke-a
                                            break;
                                        }
                                        if (firstDigitPL == false && secondDigitPL == true) { //jika index pertama bukan integer dan index kedua merupakan integer yg berarti nilai packet loss berupa dua digit (puluhan), maka
                                            integerPL[2] = Character.getNumericValue(dataTunggalPL[2]); //kedua digit tersebut (char) diubah ke (int) 
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]);
                                            nilaiPL[a] = (10 * integerPL[2]) + (integerPL[3]); //nilai packet loss ke-a
                                            break;
                                        }
                                        if (firstDigitPL == false && secondDigitPL == false && thirdDigitPL == true) { //jika index pertama dan kedua bukan integer dan index ketiga merupakan integer yg berarti nilai packet loss berupa satu digit (satuan), maka
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]); //digit ketiga (char) diubah ke (int)
                                            nilaiPL[a] = integerPL[3]; //nilai packet loss ke-a
                                            break;
                                        }
                                        firstIndexPL++;
                                    }
                                }

                                if (kondisiDelay == true) { //jika ditemukan kata 'rtt' di baris outputnya, maka
                                    int indexSlash = barisOutput[b].indexOf("/", 20); //mencari index dari karakter '/' setelah indeks ke 20
                                    int firstIndexDelay = indexSlash + 1; //index paling awal dari nilai delay
                                    int lastIndexDelay = barisOutput[b].indexOf("/", firstIndexDelay); //index karakter '/' setelah index delay yg paling akhir
                                    int panjangIndexDelay = lastIndexDelay - firstIndexDelay;
                                    int jmlDepanKoma = panjangIndexDelay - 4;
                                    int len = 1;
                                    int d = 1;
                                    float ratusan = 100, puluhan = 10, satuan = 1;
                                    while (len <= panjangIndexDelay) {
                                        dataTunggalDelay[len] = barisOutput[b].charAt(firstIndexDelay); //mengambil setiap karakter dari nilai delay (dimasukkan ke dataTunggal[len])
                                        digitDelay[len] = Character.isDigit(dataTunggalDelay[len]); //cek apakah karakter delay tersebut merupakan integer atau bukan
                                        if (digitDelay[len] == true) { //jika dataTunggalDelay[len] tersebut merupakan digit, maka
                                            integerDelay[len] = Character.getNumericValue(dataTunggalDelay[len]); //dataTunggalDelay[len] tersebut (char) diubah ke (int) 
                                            if (jmlDepanKoma == 3) { //jika nilai delay nya ratusan
                                                nilaiDelay[a] += integerDelay[len] * ratusan;
                                                ratusan /= 10;
                                            }
                                            if (jmlDepanKoma == 2) { //jika nilai delay nya puluhan
                                                nilaiDelay[a] += integerDelay[len] * puluhan;
                                                puluhan /= 10;
                                            }
                                            if (jmlDepanKoma == 1) { //jika nilai delay nya satuan
                                                nilaiDelay[a] += integerDelay[len] * satuan;
                                                satuan /= 10;
                                            }

                                        }
                                        firstIndexDelay++;
                                        len++;
                                    }
                                }
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    int c = 1 + angkaRandom.nextInt(5);
                    int d = (a * 10) + c;
                    if (d >= 100) {
                        d = 100;
                    }
                    jp_progress.UpdateProgress(d);
                    jp_progress.repaint();
                    System.out.println("PL = " + nilaiPL[a]);
                    System.out.println("Delay = " + nilaiDelay[a]);
                    totalPL += nilaiPL[a];
                    totalDelay += nilaiDelay[a];
                }
                packetLoss = (totalPL + ((10 - succed) * 100)) / 10;
                delay = (totalDelay + ((10 - succed) * 551)) / 10;
                if (packetLoss == 0) {
                    indeksPL = 100;
                }
                if (packetLoss == 1) {
                    indeksPL = 84;
                }
                if (packetLoss == 2) {
                    indeksPL = 76;
                }
                if (packetLoss >= 3 && packetLoss <= 6) {
                    indeksPL = 67;
                }
                if (packetLoss >= 7 && packetLoss <= 10) {
                    indeksPL = 59;
                }
                if (packetLoss >= 11 && packetLoss <= 14) {
                    indeksPL = 51;
                }
                if (packetLoss >= 15 && packetLoss <= 17) {
                    indeksPL = 42;
                }
                if (packetLoss >= 18 && packetLoss <= 20) {
                    indeksPL = 34;
                }
                if (packetLoss >= 21 && packetLoss <= 24) {
                    indeksPL = 26;
                }
                if (packetLoss >= 25 && packetLoss <= 27) {
                    indeksPL = 17;
                }
                if (packetLoss >= 28 && packetLoss <= 30) {
                    indeksPL = 9;
                }
                if (packetLoss > 30) {
                    indeksPL = 1;
                }

                if (Math.round(delay) >= 0 && Math.round(delay) <= 50) {
                    indeksDelay = 100;
                }
                if (Math.round(delay) >= 51 && Math.round(delay) <= 100) {
                    indeksDelay = 84;
                }
                if (Math.round(delay) >= 101 && Math.round(delay) <= 149) {
                    indeksDelay = 76;
                }
                if (Math.round(delay) >= 150 && Math.round(delay) <= 200) {
                    indeksDelay = 67;
                }
                if (Math.round(delay) >= 201 && Math.round(delay) <= 250) {
                    indeksDelay = 59;
                }
                if (Math.round(delay) >= 251 && Math.round(delay) <= 300) {
                    indeksDelay = 51;
                }
                if (Math.round(delay) >= 301 && Math.round(delay) <= 350) {
                    indeksDelay = 42;
                }
                if (Math.round(delay) >= 351 && Math.round(delay) <= 400) {
                    indeksDelay = 34;
                }
                if (Math.round(delay) >= 401 && Math.round(delay) <= 450) {
                    indeksDelay = 26;
                }
                if (Math.round(delay) >= 451 && Math.round(delay) <= 500) {
                    indeksDelay = 17;
                }
                if (Math.round(delay) >= 501 && Math.round(delay) <= 550) {
                    indeksDelay = 9;
                }
                if (Math.round(delay) > 550) {
                    indeksDelay = 1;
                }
                nilaiAkhir = (indeksPL + indeksDelay) / 2;
                //nilaiAkhir = indeksDelay;
                System.out.println("Nilai Akhir = " + nilaiAkhir);
                System.out.println("Succed = " + succed);
                
                progressBar.setValue(nilaiAkhir);
                Layanan.setText("Kualitas Web Browsing:");
                if (nilaiAkhir >= 76 && nilaiAkhir <= 100) {
                    progressBar.setForeground(Color.BLUE);
                }
                if (nilaiAkhir >= 51 && nilaiAkhir <= 75) {
                    progressBar.setForeground(Color.GREEN);
                }
                if (nilaiAkhir >= 26 && nilaiAkhir <= 50) {
                    progressBar.setForeground(Color.YELLOW);
                }
                if (nilaiAkhir >= 0 && nilaiAkhir <= 25) {
                    progressBar.setForeground(Color.RED);
                }
                succed = 0;
            }
        }).start();

    }//GEN-LAST:event_btn_WBActionPerformed

    private void btn_VidSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_VidSActionPerformed
        timerProgress.start();
        new Thread(new Runnable() {

            @Override
            public void run() {
                Layanan.setText("");
                progressBar.setValue(0);
                jp_progress.UpdateProgress(0);
                jp_progress.repaint();
                jp_progress.setVisible(true);
                String[] barisOutput = new String[600]; //output dari eksekusi perintah terminal disimpan dalam barisOutput[]
                String keyPL = ".*packets.*", keyDelay = ".*rtt.*"; //kata kunci untuk mencari nilai packet loss dan nilai delay
                char[] dataTunggalPL = new char[5], dataTunggalDelay = new char[10]; //data nilai packet loss dan data nilai delay dalam bentuk char tunggal 
                int[] integerPL = new int[5], integerDelay = new int[10], nilaiPL = new int[11]; //nilai dataTunggalPL, dataTunggalDelay dalam integer dan nilai packet loss setiap eksekusi perintah terminal
                float[] nilaiDelay = new float[11]; //nilai delay dari setiap eksekusi perintah terminal
                boolean firstDigitPL, secondDigitPL, thirdDigitPL; //untuk mengecek dataTunggalPL berupa integer atau bukan
                boolean[] digitDelay = new boolean[10]; //untuk mengecek dataTunggalDelay berupa integer atau bukan
                float totalDelay = 0, delay;
                int packetLoss, totalPL = 0, indeksPL = 0, indeksDelay = 0, succed = 0;
                Random angkaRandom = new Random();
                for (int a = 1; a <= 10; a++) { //perintah terminal dijalankan 10 kali, artinya video streaming dijalankan selama 10 detik
                    ProcessBuilder processBuilder = new ProcessBuilder();
                    processBuilder.command("bash", "-c", "sudo ping www.youtube.com -s 60 -c 569 -i 0.0017"); //perintah terminal untuk video streaming
                    try {
                        Process process = processBuilder.start();
                        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        for (int b = 1; b <= 574; b++) { //output dari eksekusi terminal sebanyak 574 baris, artinya b[574]
                            barisOutput[b] = reader.readLine(); //setiap baris output dimasukkan ke barisOutput[b]
                            if (barisOutput[b] != null) {
                                boolean kondisiPL = Pattern.matches(keyPL, barisOutput[b]); //dicari kata kunci 'packets' di setiap baris outputnya
                                boolean kondisiDelay = Pattern.matches(keyDelay, barisOutput[b]); //dicari kata kunci 'rtt' di setiap baris outputnya
                                if (kondisiPL == true) { //jika ditemukan kata 'packets' di baris outputnya, maka
                                    succed++;
                                    int indexPersen = barisOutput[b].indexOf("%"); //mencari index karakter % dari barisOutput[b] tersebut
                                    int firstIndexPL = indexPersen - 3; //index paling awal yang berpeluang menjadi index dari nilai packet loss
                                    while (firstIndexPL < indexPersen) { //pengambilan data nilai integer saja dari index yang berpeluang menjadi nilai packet loss tersebut 
                                        dataTunggalPL[1] = barisOutput[b].charAt(firstIndexPL); //mengambil setiap karakter(dataPL) dari IndexPL sampai IndexPersen-1
                                        dataTunggalPL[2] = barisOutput[b].charAt(firstIndexPL + 1);
                                        dataTunggalPL[3] = barisOutput[b].charAt(firstIndexPL + 2);
                                        firstDigitPL = Character.isDigit(dataTunggalPL[1]); //cek apakah karakter(dataTunggalPL[]) tersebut merupakan integer atau bukan
                                        secondDigitPL = Character.isDigit(dataTunggalPL[2]);
                                        thirdDigitPL = Character.isDigit(dataTunggalPL[3]);
                                        if (firstDigitPL == true) { //jika index pertama merupakan integer yg berarti nilai packet loss berupa tiga digit (ratusan), maka
                                            integerPL[1] = Character.getNumericValue(dataTunggalPL[1]); //ketiga digit tersebut (char) diubah ke (int) 
                                            integerPL[2] = Character.getNumericValue(dataTunggalPL[2]);
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]);
                                            nilaiPL[a] = (100 * integerPL[1]) + (10 * integerPL[2]) + (integerPL[3]); //nilai packet loss ke-a
                                            break;
                                        }
                                        if (firstDigitPL == false && secondDigitPL == true) { //jika index pertama bukan integer dan index kedua merupakan integer yg berarti nilai packet loss berupa dua digit (puluhan), maka
                                            integerPL[2] = Character.getNumericValue(dataTunggalPL[2]); //kedua digit tersebut (char) diubah ke (int) 
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]);
                                            nilaiPL[a] = (10 * integerPL[2]) + (integerPL[3]); //nilai packet loss ke-a
                                            break;
                                        }
                                        if (firstDigitPL == false && secondDigitPL == false && thirdDigitPL == true) { //jika index pertama dan kedua bukan integer dan index ketiga merupakan integer yg berarti nilai packet loss berupa satu digit (satuan), maka
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]); //digit ketiga (char) diubah ke (int)
                                            nilaiPL[a] = integerPL[3]; //nilai packet loss ke-a
                                            break;
                                        }
                                        firstIndexPL++;
                                    }
                                }

                                if (kondisiDelay == true) { //jika ditemukan kata 'rtt' di baris outputnya, maka
                                    int indexSlash = barisOutput[b].indexOf("/", 20); //mencari index dari karakter '/' setelah indeks ke 20
                                    int firstIndexDelay = indexSlash + 1; //index paling awal dari nilai delay
                                    int lastIndexDelay = barisOutput[b].indexOf("/", firstIndexDelay); //index karakter '/' setelah index delay yg paling akhir
                                    int panjangIndexDelay = lastIndexDelay - firstIndexDelay;
                                    int jmlDepanKoma = panjangIndexDelay - 4;
                                    int len = 1;
                                    int d = 1;
                                    float ratusan = 100, puluhan = 10, satuan = 1;
                                    while (len <= panjangIndexDelay) {
                                        dataTunggalDelay[len] = barisOutput[b].charAt(firstIndexDelay); //mengambil setiap karakter dari nilai delay (dimasukkan ke dataTunggal[len])
                                        digitDelay[len] = Character.isDigit(dataTunggalDelay[len]); //cek apakah karakter delay tersebut merupakan integer atau bukan
                                        if (digitDelay[len] == true) { //jika dataTunggalDelay[len] tersebut merupakan digit, maka
                                            integerDelay[len] = Character.getNumericValue(dataTunggalDelay[len]); //dataTunggalDelay[len] tersebut (char) diubah ke (int) 
                                            if (jmlDepanKoma == 3) { //jika nilai delay nya ratusan
                                                nilaiDelay[a] += integerDelay[len] * ratusan;
                                                ratusan /= 10;
                                            }
                                            if (jmlDepanKoma == 2) { //jika nilai delay nya puluhan
                                                nilaiDelay[a] += integerDelay[len] * puluhan;
                                                puluhan /= 10;
                                            }
                                            if (jmlDepanKoma == 1) { //jika nilai delay nya satuan
                                                nilaiDelay[a] += integerDelay[len] * satuan;
                                                satuan /= 10;
                                            }

                                        }
                                        firstIndexDelay++;
                                        len++;
                                    }
                                }
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    int c = 1 + angkaRandom.nextInt(5);
                    int d = (a * 10) + c;
                    if (d >= 100) {
                        d = 100;
                    }
                    jp_progress.UpdateProgress(d);
                    jp_progress.repaint();
                    System.out.println("PL = " + nilaiPL[a]);
                    System.out.println("Delay = " + nilaiDelay[a]);
                    totalPL += nilaiPL[a];
                    totalDelay += nilaiDelay[a];
                }
                packetLoss = (totalPL + ((10 - succed) * 100)) / 10;
                delay = (totalDelay + ((10 - succed) * 551)) / 10;
                if (packetLoss == 0) {
                    indeksPL = 100;
                }
                if (packetLoss == 1) {
                    indeksPL = 84;
                }
                if (packetLoss == 2) {
                    indeksPL = 76;
                }
                if (packetLoss >= 3 && packetLoss <= 6) {
                    indeksPL = 67;
                }
                if (packetLoss >= 7 && packetLoss <= 10) {
                    indeksPL = 59;
                }
                if (packetLoss >= 11 && packetLoss <= 14) {
                    indeksPL = 51;
                }
                if (packetLoss >= 15 && packetLoss <= 17) {
                    indeksPL = 42;
                }
                if (packetLoss >= 18 && packetLoss <= 20) {
                    indeksPL = 34;
                }
                if (packetLoss >= 21 && packetLoss <= 24) {
                    indeksPL = 26;
                }
                if (packetLoss >= 25 && packetLoss <= 27) {
                    indeksPL = 17;
                }
                if (packetLoss >= 28 && packetLoss <= 30) {
                    indeksPL = 9;
                }
                if (packetLoss > 30) {
                    indeksPL = 1;
                }

                if (Math.round(delay) >= 0 && Math.round(delay) <= 50) {
                    indeksDelay = 100;
                }
                if (Math.round(delay) >= 51 && Math.round(delay) <= 100) {
                    indeksDelay = 84;
                }
                if (Math.round(delay) >= 101 && Math.round(delay) <= 149) {
                    indeksDelay = 76;
                }
                if (Math.round(delay) >= 150 && Math.round(delay) <= 200) {
                    indeksDelay = 67;
                }
                if (Math.round(delay) >= 201 && Math.round(delay) <= 250) {
                    indeksDelay = 59;
                }
                if (Math.round(delay) >= 251 && Math.round(delay) <= 300) {
                    indeksDelay = 51;
                }
                if (Math.round(delay) >= 301 && Math.round(delay) <= 350) {
                    indeksDelay = 42;
                }
                if (Math.round(delay) >= 351 && Math.round(delay) <= 400) {
                    indeksDelay = 34;
                }
                if (Math.round(delay) >= 401 && Math.round(delay) <= 450) {
                    indeksDelay = 26;
                }
                if (Math.round(delay) >= 451 && Math.round(delay) <= 500) {
                    indeksDelay = 17;
                }
                if (Math.round(delay) >= 501 && Math.round(delay) <= 550) {
                    indeksDelay = 9;
                }
                if (Math.round(delay) > 550) {
                    indeksDelay = 1;
                }
                nilaiAkhir = (indeksPL + indeksDelay) / 2;
                System.out.println("Nilai Akhir = " + nilaiAkhir);
                System.out.println("Succed = " + succed);
                
                progressBar.setValue(nilaiAkhir);
                Layanan.setText("Kualitas Video Streaming:");
                if (nilaiAkhir >= 76 && nilaiAkhir <= 100) {
                    progressBar.setForeground(Color.BLUE);
                }
                if (nilaiAkhir >= 51 && nilaiAkhir <= 75) {
                    progressBar.setForeground(Color.GREEN);
                }
                if (nilaiAkhir >= 26 && nilaiAkhir <= 50) {
                    progressBar.setForeground(Color.YELLOW);
                }
                if (nilaiAkhir >= 0 && nilaiAkhir <= 25) {
                    progressBar.setForeground(Color.RED);
                }
                succed = 0;
            }
        }).start();
    }//GEN-LAST:event_btn_VidSActionPerformed

    private void btn_ASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ASActionPerformed
        timerProgress.start();
        new Thread(new Runnable() {

            @Override
            public void run() {
                Layanan.setText("");
                progressBar.setValue(0);
                jp_progress.UpdateProgress(0);
                jp_progress.repaint();
                jp_progress.setVisible(true);
                String[] barisOutput = new String[300]; //output dari eksekusi perintah terminal disimpan dalam barisOutput[]
                String keyPL = ".*packets.*", keyDelay = ".*rtt.*"; //kata kunci untuk mencari nilai packet loss dan nilai delay
                char[] dataTunggalPL = new char[5], dataTunggalDelay = new char[10]; //data nilai packet loss dan data nilai delay dalam bentuk char tunggal 
                int[] integerPL = new int[5], integerDelay = new int[10], nilaiPL = new int[11]; //nilai dataTunggalPL, dataTunggalDelay dalam integer dan nilai packet loss setiap eksekusi perintah terminal
                float[] nilaiDelay = new float[11]; //nilai delay dari setiap eksekusi perintah terminal
                boolean firstDigitPL, secondDigitPL, thirdDigitPL; //untuk mengecek dataTunggalPL berupa integer atau bukan
                boolean[] digitDelay = new boolean[10]; //untuk mengecek dataTunggalDelay berupa integer atau bukan
                float totalDelay = 0, delay;
                int packetLoss, totalPL = 0, indeksPL = 0, indeksDelay = 0, succed = 0;
                Random angkaRandom = new Random();
                for (int a = 1; a <= 10; a++) { //perintah terminal dijalankan 10 kali, artinya audio streaming dijalankan selama 10 detik
                    ProcessBuilder processBuilder = new ProcessBuilder();
                    processBuilder.command("bash", "-c", "sudo ping www.spotify.com -s 60 -c 267 -i 0.0037"); //perintah terminal untuk audio streaming
                    try {
                        Process process = processBuilder.start();
                        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        for (int b = 1; b <= 272; b++) { //output dari eksekusi terminal sebanyak 272 baris, artinya b[272]
                            barisOutput[b] = reader.readLine(); //setiap baris output dimasukkan ke barisOutput[b]
                            if (barisOutput[b] != null) {
                                boolean kondisiPL = Pattern.matches(keyPL, barisOutput[b]); //dicari kata kunci 'packets' di setiap baris outputnya
                                boolean kondisiDelay = Pattern.matches(keyDelay, barisOutput[b]); //dicari kata kunci 'rtt' di setiap baris outputnya
                                if (kondisiPL == true) { //jika ditemukan kata 'packets' di baris outputnya, maka
                                    succed++;
                                    int indexPersen = barisOutput[b].indexOf("%"); //mencari index karakter % dari barisOutput[b] tersebut
                                    int firstIndexPL = indexPersen - 3; //index paling awal yang berpeluang menjadi index dari nilai packet loss
                                    while (firstIndexPL < indexPersen) { //pengambilan data nilai integer saja dari index yang berpeluang menjadi nilai packet loss tersebut 
                                        dataTunggalPL[1] = barisOutput[b].charAt(firstIndexPL); //mengambil setiap karakter(dataPL) dari IndexPL sampai IndexPersen-1
                                        dataTunggalPL[2] = barisOutput[b].charAt(firstIndexPL + 1);
                                        dataTunggalPL[3] = barisOutput[b].charAt(firstIndexPL + 2);
                                        firstDigitPL = Character.isDigit(dataTunggalPL[1]); //cek apakah karakter(dataTunggalPL[]) tersebut merupakan integer atau bukan
                                        secondDigitPL = Character.isDigit(dataTunggalPL[2]);
                                        thirdDigitPL = Character.isDigit(dataTunggalPL[3]);
                                        if (firstDigitPL == true) { //jika index pertama merupakan integer yg berarti nilai packet loss berupa tiga digit (ratusan), maka
                                            integerPL[1] = Character.getNumericValue(dataTunggalPL[1]); //ketiga digit tersebut (char) diubah ke (int) 
                                            integerPL[2] = Character.getNumericValue(dataTunggalPL[2]);
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]);
                                            nilaiPL[a] = (100 * integerPL[1]) + (10 * integerPL[2]) + (integerPL[3]); //nilai packet loss ke-a
                                            break;
                                        }
                                        if (firstDigitPL == false && secondDigitPL == true) { //jika index pertama bukan integer dan index kedua merupakan integer yg berarti nilai packet loss berupa dua digit (puluhan), maka
                                            integerPL[2] = Character.getNumericValue(dataTunggalPL[2]); //kedua digit tersebut (char) diubah ke (int) 
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]);
                                            nilaiPL[a] = (10 * integerPL[2]) + (integerPL[3]); //nilai packet loss ke-a
                                            break;
                                        }
                                        if (firstDigitPL == false && secondDigitPL == false && thirdDigitPL == true) { //jika index pertama dan kedua bukan integer dan index ketiga merupakan integer yg berarti nilai packet loss berupa satu digit (satuan), maka
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]); //digit ketiga (char) diubah ke (int)
                                            nilaiPL[a] = integerPL[3]; //nilai packet loss ke-a
                                            break;
                                        }
                                        firstIndexPL++;
                                    }
                                }

                                if (kondisiDelay == true) { //jika ditemukan kata 'rtt' di baris outputnya, maka
                                    int indexSlash = barisOutput[b].indexOf("/", 20); //mencari index dari karakter '/' setelah indeks ke 20
                                    int firstIndexDelay = indexSlash + 1; //index paling awal dari nilai delay
                                    int lastIndexDelay = barisOutput[b].indexOf("/", firstIndexDelay); //index karakter '/' setelah index delay yg paling akhir
                                    int panjangIndexDelay = lastIndexDelay - firstIndexDelay;
                                    int jmlDepanKoma = panjangIndexDelay - 4;
                                    int len = 1;
                                    int d = 1;
                                    float ratusan = 100, puluhan = 10, satuan = 1;
                                    while (len <= panjangIndexDelay) {
                                        dataTunggalDelay[len] = barisOutput[b].charAt(firstIndexDelay); //mengambil setiap karakter dari nilai delay (dimasukkan ke dataTunggal[len])
                                        digitDelay[len] = Character.isDigit(dataTunggalDelay[len]); //cek apakah karakter delay tersebut merupakan integer atau bukan
                                        if (digitDelay[len] == true) { //jika dataTunggalDelay[len] tersebut merupakan digit, maka
                                            integerDelay[len] = Character.getNumericValue(dataTunggalDelay[len]); //dataTunggalDelay[len] tersebut (char) diubah ke (int) 
                                            if (jmlDepanKoma == 3) { //jika nilai delay nya ratusan
                                                nilaiDelay[a] += integerDelay[len] * ratusan;
                                                ratusan /= 10;
                                            }
                                            if (jmlDepanKoma == 2) { //jika nilai delay nya puluhan
                                                nilaiDelay[a] += integerDelay[len] * puluhan;
                                                puluhan /= 10;
                                            }
                                            if (jmlDepanKoma == 1) { //jika nilai delay nya satuan
                                                nilaiDelay[a] += integerDelay[len] * satuan;
                                                satuan /= 10;
                                            }

                                        }
                                        firstIndexDelay++;
                                        len++;
                                    }
                                }
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    int c = 1 + angkaRandom.nextInt(5);
                    int d = (a * 10) + c;
                    if (d >= 100) {
                        d = 100;
                    }
                    jp_progress.UpdateProgress(d);
                    jp_progress.repaint();
                    System.out.println("PL = " + nilaiPL[a]);
                    System.out.println("Delay = " + nilaiDelay[a]);
                    totalPL += nilaiPL[a];
                    totalDelay += nilaiDelay[a];
                }
                packetLoss = (totalPL + ((10 - succed) * 100)) / 10;
                delay = (totalDelay + ((10 - succed) * 551)) / 10;
                if (packetLoss == 0) {
                    indeksPL = 100;
                }
                if (packetLoss == 1) {
                    indeksPL = 84;
                }
                if (packetLoss == 2) {
                    indeksPL = 76;
                }
                if (packetLoss >= 3 && packetLoss <= 6) {
                    indeksPL = 67;
                }
                if (packetLoss >= 7 && packetLoss <= 10) {
                    indeksPL = 59;
                }
                if (packetLoss >= 11 && packetLoss <= 14) {
                    indeksPL = 51;
                }
                if (packetLoss >= 15 && packetLoss <= 17) {
                    indeksPL = 42;
                }
                if (packetLoss >= 18 && packetLoss <= 20) {
                    indeksPL = 34;
                }
                if (packetLoss >= 21 && packetLoss <= 24) {
                    indeksPL = 26;
                }
                if (packetLoss >= 25 && packetLoss <= 27) {
                    indeksPL = 17;
                }
                if (packetLoss >= 28 && packetLoss <= 30) {
                    indeksPL = 9;
                }
                if (packetLoss > 30) {
                    indeksPL = 1;
                }

                if (Math.round(delay) >= 0 && Math.round(delay) <= 50) {
                    indeksDelay = 100;
                }
                if (Math.round(delay) >= 51 && Math.round(delay) <= 100) {
                    indeksDelay = 84;
                }
                if (Math.round(delay) >= 101 && Math.round(delay) <= 149) {
                    indeksDelay = 76;
                }
                if (Math.round(delay) >= 150 && Math.round(delay) <= 200) {
                    indeksDelay = 67;
                }
                if (Math.round(delay) >= 201 && Math.round(delay) <= 250) {
                    indeksDelay = 59;
                }
                if (Math.round(delay) >= 251 && Math.round(delay) <= 300) {
                    indeksDelay = 51;
                }
                if (Math.round(delay) >= 301 && Math.round(delay) <= 350) {
                    indeksDelay = 42;
                }
                if (Math.round(delay) >= 351 && Math.round(delay) <= 400) {
                    indeksDelay = 34;
                }
                if (Math.round(delay) >= 401 && Math.round(delay) <= 450) {
                    indeksDelay = 26;
                }
                if (Math.round(delay) >= 451 && Math.round(delay) <= 500) {
                    indeksDelay = 17;
                }
                if (Math.round(delay) >= 501 && Math.round(delay) <= 550) {
                    indeksDelay = 9;
                }
                if (Math.round(delay) > 550) {
                    indeksDelay = 1;
                }
                nilaiAkhir = (indeksPL + indeksDelay) / 2;
                System.out.println("Nilai Akhir = " + nilaiAkhir);
                System.out.println("Succed = " + succed);
                
                progressBar.setValue(nilaiAkhir);
                Layanan.setText("Kualitas Audio Streaming:");
                if (nilaiAkhir >= 76 && nilaiAkhir <= 100) {
                    progressBar.setForeground(Color.BLUE);
                }
                if (nilaiAkhir >= 51 && nilaiAkhir <= 75) {
                    progressBar.setForeground(Color.GREEN);
                }
                if (nilaiAkhir >= 26 && nilaiAkhir <= 50) {
                    progressBar.setForeground(Color.YELLOW);
                }
                if (nilaiAkhir >= 0 && nilaiAkhir <= 25) {
                    progressBar.setForeground(Color.RED);
                }
                succed = 0;
            }
        }).start();
    }//GEN-LAST:event_btn_ASActionPerformed

    private void btn_VCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_VCActionPerformed
        timerProgress.start();
        new Thread(new Runnable() {

            @Override
            public void run() {
                Layanan.setText("");
                progressBar.setValue(0);
                jp_progress.UpdateProgress(0);
                jp_progress.repaint();
                jp_progress.setVisible(true);
                String[] barisOutput = new String[600]; //output dari eksekusi perintah terminal disimpan dalam barisOutput[]
                String keyPL = ".*packets.*", keyDelay = ".*rtt.*"; //kata kunci untuk mencari nilai packet loss dan nilai delay
                char[] dataTunggalPL = new char[5], dataTunggalDelay = new char[10]; //data nilai packet loss dan data nilai delay dalam bentuk char tunggal 
                int[] integerPL = new int[5], integerDelay = new int[10], nilaiPL = new int[11]; //nilai dataTunggalPL, dataTunggalDelay dalam integer dan nilai packet loss setiap eksekusi perintah terminal
                float[] nilaiDelay = new float[11], nilaiJitter = new float[11]; //nilai delay dari setiap eksekusi perintah terminal
                boolean firstDigitPL, secondDigitPL, thirdDigitPL; //untuk mengecek dataTunggalPL berupa integer atau bukan
                boolean[] digitDelay = new boolean[10]; //untuk mengecek dataTunggalDelay berupa integer atau bukan
                float totalDelay = 0, totalJitter = 0, delay, jitter;
                int packetLoss, totalPL = 0, indeksPL = 0, indeksDelay = 0, indeksJitter = 0, succed = 0;
                Random angkaRandom = new Random();
                for (int a = 1; a <= 10; a++) { //perintah terminal dijalankan 10 kali, artinya video call dijalankan selama 10 detik
                    ProcessBuilder processBuilder = new ProcessBuilder();
                    processBuilder.command("bash", "-c", "sudo ping hangouts.google.com -s 60 -c 534 -i 0.0018"); //perintah terminal untuk video call
                    try {
                        Process process = processBuilder.start();
                        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        for (int b = 1; b <= 539; b++) { //output dari eksekusi terminal sebanyak 539 baris, artinya b[539]
                            barisOutput[b] = reader.readLine(); //setiap baris output dimasukkan ke barisOutput[b]
                            if (barisOutput[b] != null) {
                                boolean kondisiPL = Pattern.matches(keyPL, barisOutput[b]); //dicari kata kunci 'packets' di setiap baris outputnya
                                boolean kondisiDelay = Pattern.matches(keyDelay, barisOutput[b]); //dicari kata kunci 'rtt' di setiap baris outputnya
                                if (kondisiPL == true) { //jika ditemukan kata 'packets' di baris outputnya, maka
                                    succed++;
                                    int indexPersen = barisOutput[b].indexOf("%"); //mencari index karakter % dari barisOutput[b] tersebut
                                    int firstIndexPL = indexPersen - 3; //index paling awal yang berpeluang menjadi index dari nilai packet loss
                                    while (firstIndexPL < indexPersen) { //pengambilan data nilai integer saja dari index yang berpeluang menjadi nilai packet loss tersebut 
                                        dataTunggalPL[1] = barisOutput[b].charAt(firstIndexPL); //mengambil setiap karakter(dataPL) dari IndexPL sampai IndexPersen-1
                                        dataTunggalPL[2] = barisOutput[b].charAt(firstIndexPL + 1);
                                        dataTunggalPL[3] = barisOutput[b].charAt(firstIndexPL + 2);
                                        firstDigitPL = Character.isDigit(dataTunggalPL[1]); //cek apakah karakter(dataTunggalPL[]) tersebut merupakan integer atau bukan
                                        secondDigitPL = Character.isDigit(dataTunggalPL[2]);
                                        thirdDigitPL = Character.isDigit(dataTunggalPL[3]);
                                        if (firstDigitPL == true) { //jika index pertama merupakan integer yg berarti nilai packet loss berupa tiga digit (ratusan), maka
                                            integerPL[1] = Character.getNumericValue(dataTunggalPL[1]); //ketiga digit tersebut (char) diubah ke (int) 
                                            integerPL[2] = Character.getNumericValue(dataTunggalPL[2]);
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]);
                                            nilaiPL[a] = (100 * integerPL[1]) + (10 * integerPL[2]) + (integerPL[3]); //nilai packet loss ke-a
                                            break;
                                        }
                                        if (firstDigitPL == false && secondDigitPL == true) { //jika index pertama bukan integer dan index kedua merupakan integer yg berarti nilai packet loss berupa dua digit (puluhan), maka
                                            integerPL[2] = Character.getNumericValue(dataTunggalPL[2]); //kedua digit tersebut (char) diubah ke (int) 
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]);
                                            nilaiPL[a] = (10 * integerPL[2]) + (integerPL[3]); //nilai packet loss ke-a
                                            break;
                                        }
                                        if (firstDigitPL == false && secondDigitPL == false && thirdDigitPL == true) { //jika index pertama dan kedua bukan integer dan index ketiga merupakan integer yg berarti nilai packet loss berupa satu digit (satuan), maka
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]); //digit ketiga (char) diubah ke (int)
                                            nilaiPL[a] = integerPL[3]; //nilai packet loss ke-a
                                            break;
                                        }
                                        firstIndexPL++;
                                    }
                                }

                                if (kondisiDelay == true) { //jika ditemukan kata 'rtt' di baris outputnya, maka
                                    int indexSlash = barisOutput[b].indexOf("/", 20); //mencari index dari karakter '/' setelah indeks ke 20
                                    int firstIndexDelay = indexSlash + 1; //index paling awal dari nilai delay
                                    int lastIndexDelay = barisOutput[b].indexOf("/", firstIndexDelay); //index karakter '/' setelah index delay yg paling akhir
                                    int panjangIndexDelay = lastIndexDelay - firstIndexDelay;
                                    int jmlDepanKoma = panjangIndexDelay - 4;
                                    int len = 1;
                                    int d = 1;
                                    float ratusan = 100, puluhan = 10, satuan = 1;
                                    while (len <= panjangIndexDelay) {
                                        dataTunggalDelay[len] = barisOutput[b].charAt(firstIndexDelay); //mengambil setiap karakter dari nilai delay (dimasukkan ke dataTunggal[len])
                                        digitDelay[len] = Character.isDigit(dataTunggalDelay[len]); //cek apakah karakter delay tersebut merupakan integer atau bukan
                                        if (digitDelay[len] == true) { //jika dataTunggalDelay[len] tersebut merupakan digit, maka
                                            integerDelay[len] = Character.getNumericValue(dataTunggalDelay[len]); //dataTunggalDelay[len] tersebut (char) diubah ke (int) 
                                            if (jmlDepanKoma == 3) { //jika nilai delay nya ratusan
                                                nilaiDelay[a] += integerDelay[len] * ratusan;
                                                ratusan /= 10;
                                            }
                                            if (jmlDepanKoma == 2) { //jika nilai delay nya puluhan
                                                nilaiDelay[a] += integerDelay[len] * puluhan;
                                                puluhan /= 10;
                                            }
                                            if (jmlDepanKoma == 1) { //jika nilai delay nya satuan
                                                nilaiDelay[a] += integerDelay[len] * satuan;
                                                satuan /= 10;
                                            }

                                        }
                                        firstIndexDelay++;
                                        len++;
                                    }
                                    if (a >= 2) {
                                        nilaiJitter[a] = Math.abs(nilaiDelay[a] - nilaiDelay[a - 1]);
                                    }
                                }
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    int c = 1 + angkaRandom.nextInt(5);
                    int d = (a * 10) + c;
                    if (d >= 100) {
                        d = 100;
                    }
                    jp_progress.UpdateProgress(d);
                    jp_progress.repaint();
                    System.out.println("PL = " + nilaiPL[a]);
                    System.out.println("Delay = " + nilaiDelay[a]);
                    System.out.println("Jitter = " + nilaiJitter[a]);
                    totalPL += nilaiPL[a];
                    totalDelay += nilaiDelay[a];
                    totalJitter += nilaiJitter[a];
                }
                packetLoss = (totalPL + ((10 - succed) * 100)) / 10;
                delay = (totalDelay + ((10 - succed) * 551)) / 10;
                jitter = (totalJitter + ((10 - succed) * 261)) / 10;
                if (packetLoss == 0) {
                    indeksPL = 100;
                }
                if (packetLoss == 1) {
                    indeksPL = 84;
                }
                if (packetLoss == 2) {
                    indeksPL = 76;
                }
                if (packetLoss >= 3 && packetLoss <= 6) {
                    indeksPL = 67;
                }
                if (packetLoss >= 7 && packetLoss <= 10) {
                    indeksPL = 59;
                }
                if (packetLoss >= 11 && packetLoss <= 14) {
                    indeksPL = 51;
                }
                if (packetLoss >= 15 && packetLoss <= 17) {
                    indeksPL = 42;
                }
                if (packetLoss >= 18 && packetLoss <= 20) {
                    indeksPL = 34;
                }
                if (packetLoss >= 21 && packetLoss <= 24) {
                    indeksPL = 26;
                }
                if (packetLoss >= 25 && packetLoss <= 27) {
                    indeksPL = 17;
                }
                if (packetLoss >= 28 && packetLoss <= 30) {
                    indeksPL = 9;
                }
                if (packetLoss > 30) {
                    indeksPL = 1;
                }

                if (Math.round(delay) >= 0 && Math.round(delay) <= 50) {
                    indeksDelay = 100;
                }
                if (Math.round(delay) >= 51 && Math.round(delay) <= 100) {
                    indeksDelay = 84;
                }
                if (Math.round(delay) >= 101 && Math.round(delay) <= 149) {
                    indeksDelay = 76;
                }
                if (Math.round(delay) >= 150 && Math.round(delay) <= 200) {
                    indeksDelay = 67;
                }
                if (Math.round(delay) >= 201 && Math.round(delay) <= 250) {
                    indeksDelay = 59;
                }
                if (Math.round(delay) >= 251 && Math.round(delay) <= 300) {
                    indeksDelay = 51;
                }
                if (Math.round(delay) >= 301 && Math.round(delay) <= 350) {
                    indeksDelay = 42;
                }
                if (Math.round(delay) >= 351 && Math.round(delay) <= 400) {
                    indeksDelay = 34;
                }
                if (Math.round(delay) >= 401 && Math.round(delay) <= 450) {
                    indeksDelay = 26;
                }
                if (Math.round(delay) >= 451 && Math.round(delay) <= 500) {
                    indeksDelay = 17;
                }
                if (Math.round(delay) >= 501 && Math.round(delay) <= 550) {
                    indeksDelay = 9;
                }
                if (Math.round(delay) > 550) {
                    indeksDelay = 1;
                }

                if (Math.round(jitter) >= 0 && Math.round(jitter) <= 25) {
                    indeksJitter = 100;
                }
                if (Math.round(jitter) >= 26 && Math.round(jitter) <= 50) {
                    indeksJitter = 84;
                }
                if (Math.round(jitter) >= 51 && Math.round(jitter) <= 74) {
                    indeksJitter = 76;
                }
                if (Math.round(jitter) >= 75 && Math.round(jitter) <= 91) {
                    indeksJitter = 67;
                }
                if (Math.round(jitter) >= 92 && Math.round(jitter) <= 108) {
                    indeksJitter = 59;
                }
                if (Math.round(jitter) >= 109 && Math.round(jitter) <= 124) {
                    indeksJitter = 51;
                }
                if (Math.round(jitter) >= 125 && Math.round(jitter) <= 158) {
                    indeksJitter = 42;
                }
                if (Math.round(jitter) >= 159 && Math.round(jitter) <= 192) {
                    indeksJitter = 34;
                }
                if (Math.round(jitter) >= 193 && Math.round(jitter) <= 225) {
                    indeksJitter = 26;
                }
                if (Math.round(jitter) >= 226 && Math.round(jitter) <= 242) {
                    indeksJitter = 17;
                }
                if (Math.round(jitter) >= 243 && Math.round(jitter) <= 260) {
                    indeksJitter = 9;
                }
                if (Math.round(jitter) > 260) {
                    indeksJitter = 1;
                }
                nilaiAkhir = (indeksPL + indeksDelay + indeksJitter) / 3;
                System.out.println("Nilai Akhir = " + nilaiAkhir);
                System.out.println("Succed = " + succed);
                
                progressBar.setValue(nilaiAkhir);
                Layanan.setText("Kualitas Video Call:");
                if (nilaiAkhir >= 76 && nilaiAkhir <= 100) {
                    progressBar.setForeground(Color.BLUE);
                }
                if (nilaiAkhir >= 51 && nilaiAkhir <= 75) {
                    progressBar.setForeground(Color.GREEN);
                }
                if (nilaiAkhir >= 26 && nilaiAkhir <= 50) {
                    progressBar.setForeground(Color.YELLOW);
                }
                if (nilaiAkhir >= 0 && nilaiAkhir <= 25) {
                    progressBar.setForeground(Color.RED);
                }
                succed = 0;
            }
        }).start();
    }//GEN-LAST:event_btn_VCActionPerformed

    private void btn_VoCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_VoCActionPerformed
        timerProgress.start();
        new Thread(new Runnable() {

            @Override
            public void run() {
                Layanan.setText("");
                progressBar.setValue(0);
                jp_progress.UpdateProgress(0);
                jp_progress.repaint();
                jp_progress.setVisible(true);
                String[] barisOutput = new String[200]; //output dari eksekusi perintah terminal disimpan dalam barisOutput[]
                String keyPL = ".*packets.*", keyDelay = ".*rtt.*"; //kata kunci untuk mencari nilai packet loss dan nilai delay
                char[] dataTunggalPL = new char[5], dataTunggalDelay = new char[10]; //data nilai packet loss dan data nilai delay dalam bentuk char tunggal 
                int[] integerPL = new int[5], integerDelay = new int[10], nilaiPL = new int[11]; //nilai dataTunggalPL, dataTunggalDelay dalam integer dan nilai packet loss setiap eksekusi perintah terminal
                float[] nilaiDelay = new float[11], nilaiJitter = new float[11]; //nilai delay dari setiap eksekusi perintah terminal
                boolean firstDigitPL, secondDigitPL, thirdDigitPL; //untuk mengecek dataTunggalPL berupa integer atau bukan
                boolean[] digitDelay = new boolean[10]; //untuk mengecek dataTunggalDelay berupa integer atau bukan
                float totalDelay = 0, totalJitter = 0, delay, jitter;
                int packetLoss, totalPL = 0, indeksPL = 0, indeksDelay = 0, indeksJitter = 0, succed = 0;
                Random angkaRandom = new Random();
                for (int a = 1; a <= 10; a++) { //perintah terminal dijalankan 10 kali, artinya voice call dijalankan selama 10 detik
                    ProcessBuilder processBuilder = new ProcessBuilder();
                    processBuilder.command("bash", "-c", "sudo ping hangouts.google.com -s 60 -c 134 -i 0.0074"); //perintah terminal untuk voice call
                    try {
                        Process process = processBuilder.start();
                        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        for (int b = 1; b <= 139; b++) { //output dari eksekusi terminal sebanyak 139 baris, artinya b[139]
                            barisOutput[b] = reader.readLine(); //setiap baris output dimasukkan ke barisOutput[b]
                            if (barisOutput[b] != null) {
                                boolean kondisiPL = Pattern.matches(keyPL, barisOutput[b]); //dicari kata kunci 'packets' di setiap baris outputnya
                                boolean kondisiDelay = Pattern.matches(keyDelay, barisOutput[b]); //dicari kata kunci 'rtt' di setiap baris outputnya
                                if (kondisiPL == true) { //jika ditemukan kata 'packets' di baris outputnya, maka
                                    succed++;
                                    int indexPersen = barisOutput[b].indexOf("%"); //mencari index karakter % dari barisOutput[b] tersebut
                                    int firstIndexPL = indexPersen - 3; //index paling awal yang berpeluang menjadi index dari nilai packet loss
                                    while (firstIndexPL < indexPersen) { //pengambilan data nilai integer saja dari index yang berpeluang menjadi nilai packet loss tersebut 
                                        dataTunggalPL[1] = barisOutput[b].charAt(firstIndexPL); //mengambil setiap karakter(dataPL) dari IndexPL sampai IndexPersen-1
                                        dataTunggalPL[2] = barisOutput[b].charAt(firstIndexPL + 1);
                                        dataTunggalPL[3] = barisOutput[b].charAt(firstIndexPL + 2);
                                        firstDigitPL = Character.isDigit(dataTunggalPL[1]); //cek apakah karakter(dataTunggalPL[]) tersebut merupakan integer atau bukan
                                        secondDigitPL = Character.isDigit(dataTunggalPL[2]);
                                        thirdDigitPL = Character.isDigit(dataTunggalPL[3]);
                                        if (firstDigitPL == true) { //jika index pertama merupakan integer yg berarti nilai packet loss berupa tiga digit (ratusan), maka
                                            integerPL[1] = Character.getNumericValue(dataTunggalPL[1]); //ketiga digit tersebut (char) diubah ke (int) 
                                            integerPL[2] = Character.getNumericValue(dataTunggalPL[2]);
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]);
                                            nilaiPL[a] = (100 * integerPL[1]) + (10 * integerPL[2]) + (integerPL[3]); //nilai packet loss ke-a
                                            break;
                                        }
                                        if (firstDigitPL == false && secondDigitPL == true) { //jika index pertama bukan integer dan index kedua merupakan integer yg berarti nilai packet loss berupa dua digit (puluhan), maka
                                            integerPL[2] = Character.getNumericValue(dataTunggalPL[2]); //kedua digit tersebut (char) diubah ke (int) 
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]);
                                            nilaiPL[a] = (10 * integerPL[2]) + (integerPL[3]); //nilai packet loss ke-a
                                            break;
                                        }
                                        if (firstDigitPL == false && secondDigitPL == false && thirdDigitPL == true) { //jika index pertama dan kedua bukan integer dan index ketiga merupakan integer yg berarti nilai packet loss berupa satu digit (satuan), maka
                                            integerPL[3] = Character.getNumericValue(dataTunggalPL[3]); //digit ketiga (char) diubah ke (int)
                                            nilaiPL[a] = integerPL[3]; //nilai packet loss ke-a
                                            break;
                                        }
                                        firstIndexPL++;
                                    }
                                }

                                if (kondisiDelay == true) { //jika ditemukan kata 'rtt' di baris outputnya, maka
                                    int indexSlash = barisOutput[b].indexOf("/", 20); //mencari index dari karakter '/' setelah indeks ke 20
                                    int firstIndexDelay = indexSlash + 1; //index paling awal dari nilai delay
                                    int lastIndexDelay = barisOutput[b].indexOf("/", firstIndexDelay); //index karakter '/' setelah index delay yg paling akhir
                                    int panjangIndexDelay = lastIndexDelay - firstIndexDelay;
                                    int jmlDepanKoma = panjangIndexDelay - 4;
                                    int len = 1;
                                    int d = 1;
                                    float ratusan = 100, puluhan = 10, satuan = 1;
                                    while (len <= panjangIndexDelay) {
                                        dataTunggalDelay[len] = barisOutput[b].charAt(firstIndexDelay); //mengambil setiap karakter dari nilai delay (dimasukkan ke dataTunggal[len])
                                        digitDelay[len] = Character.isDigit(dataTunggalDelay[len]); //cek apakah karakter delay tersebut merupakan integer atau bukan
                                        if (digitDelay[len] == true) { //jika dataTunggalDelay[len] tersebut merupakan digit, maka
                                            integerDelay[len] = Character.getNumericValue(dataTunggalDelay[len]); //dataTunggalDelay[len] tersebut (char) diubah ke (int) 
                                            if (jmlDepanKoma == 3) { //jika nilai delay nya ratusan
                                                nilaiDelay[a] += integerDelay[len] * ratusan;
                                                ratusan /= 10;
                                            }
                                            if (jmlDepanKoma == 2) { //jika nilai delay nya puluhan
                                                nilaiDelay[a] += integerDelay[len] * puluhan;
                                                puluhan /= 10;
                                            }
                                            if (jmlDepanKoma == 1) { //jika nilai delay nya satuan
                                                nilaiDelay[a] += integerDelay[len] * satuan;
                                                satuan /= 10;
                                            }

                                        }
                                        firstIndexDelay++;
                                        len++;
                                    }
                                    if (a >= 2) {
                                        nilaiJitter[a] = Math.abs(nilaiDelay[a] - nilaiDelay[a - 1]);
                                    }
                                }
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    int c = 1 + angkaRandom.nextInt(5);
                    int d = (a * 10) + c;
                    if (d >= 100) {
                        d = 100;
                    }
                    jp_progress.UpdateProgress(d);
                    jp_progress.repaint();
                    System.out.println("PL = " + nilaiPL[a]);
                    System.out.println("Delay = " + nilaiDelay[a]);
                    System.out.println("Jitter = " + nilaiJitter[a]);
                    totalPL += nilaiPL[a];
                    totalDelay += nilaiDelay[a];
                    totalJitter += nilaiJitter[a];
                }
                packetLoss = (totalPL + ((10 - succed) * 100)) / 10;
                delay = (totalDelay + ((10 - succed) * 551)) / 10;
                jitter = (totalJitter + ((10 - succed) * 261)) / 10;
                if (packetLoss == 0) {
                    indeksPL = 100;
                }
                if (packetLoss == 1) {
                    indeksPL = 84;
                }
                if (packetLoss == 2) {
                    indeksPL = 76;
                }
                if (packetLoss >= 3 && packetLoss <= 6) {
                    indeksPL = 67;
                }
                if (packetLoss >= 7 && packetLoss <= 10) {
                    indeksPL = 59;
                }
                if (packetLoss >= 11 && packetLoss <= 14) {
                    indeksPL = 51;
                }
                if (packetLoss >= 15 && packetLoss <= 17) {
                    indeksPL = 42;
                }
                if (packetLoss >= 18 && packetLoss <= 20) {
                    indeksPL = 34;
                }
                if (packetLoss >= 21 && packetLoss <= 24) {
                    indeksPL = 26;
                }
                if (packetLoss >= 25 && packetLoss <= 27) {
                    indeksPL = 17;
                }
                if (packetLoss >= 28 && packetLoss <= 30) {
                    indeksPL = 9;
                }
                if (packetLoss > 30) {
                    indeksPL = 1;
                }

                if (Math.round(delay) >= 0 && Math.round(delay) <= 50) {
                    indeksDelay = 100;
                }
                if (Math.round(delay) >= 51 && Math.round(delay) <= 100) {
                    indeksDelay = 84;
                }
                if (Math.round(delay) >= 101 && Math.round(delay) <= 149) {
                    indeksDelay = 76;
                }
                if (Math.round(delay) >= 150 && Math.round(delay) <= 200) {
                    indeksDelay = 67;
                }
                if (Math.round(delay) >= 201 && Math.round(delay) <= 250) {
                    indeksDelay = 59;
                }
                if (Math.round(delay) >= 251 && Math.round(delay) <= 300) {
                    indeksDelay = 51;
                }
                if (Math.round(delay) >= 301 && Math.round(delay) <= 350) {
                    indeksDelay = 42;
                }
                if (Math.round(delay) >= 351 && Math.round(delay) <= 400) {
                    indeksDelay = 34;
                }
                if (Math.round(delay) >= 401 && Math.round(delay) <= 450) {
                    indeksDelay = 26;
                }
                if (Math.round(delay) >= 451 && Math.round(delay) <= 500) {
                    indeksDelay = 17;
                }
                if (Math.round(delay) >= 501 && Math.round(delay) <= 550) {
                    indeksDelay = 9;
                }
                if (Math.round(delay) > 550) {
                    indeksDelay = 1;
                }

                if (Math.round(jitter) >= 0 && Math.round(jitter) <= 25) {
                    indeksJitter = 100;
                }
                if (Math.round(jitter) >= 26 && Math.round(jitter) <= 50) {
                    indeksJitter = 84;
                }
                if (Math.round(jitter) >= 51 && Math.round(jitter) <= 74) {
                    indeksJitter = 76;
                }
                if (Math.round(jitter) >= 75 && Math.round(jitter) <= 91) {
                    indeksJitter = 67;
                }
                if (Math.round(jitter) >= 92 && Math.round(jitter) <= 108) {
                    indeksJitter = 59;
                }
                if (Math.round(jitter) >= 109 && Math.round(jitter) <= 124) {
                    indeksJitter = 51;
                }
                if (Math.round(jitter) >= 125 && Math.round(jitter) <= 158) {
                    indeksJitter = 42;
                }
                if (Math.round(jitter) >= 159 && Math.round(jitter) <= 192) {
                    indeksJitter = 34;
                }
                if (Math.round(jitter) >= 193 && Math.round(jitter) <= 225) {
                    indeksJitter = 26;
                }
                if (Math.round(jitter) >= 226 && Math.round(jitter) <= 242) {
                    indeksJitter = 17;
                }
                if (Math.round(jitter) >= 243 && Math.round(jitter) <= 260) {
                    indeksJitter = 9;
                }
                if (Math.round(jitter) > 260) {
                    indeksJitter = 1;
                }nilaiAkhir = (indeksPL + indeksDelay + indeksJitter) / 3;
                System.out.println("Nilai Akhir = " + nilaiAkhir);
                System.out.println("Succed = " + succed);
                
                progressBar.setValue(nilaiAkhir);
                Layanan.setText("Kualitas Voice Call:");
                if (nilaiAkhir >= 76 && nilaiAkhir <= 100) {
                    progressBar.setForeground(Color.BLUE);
                }
                if (nilaiAkhir >= 51 && nilaiAkhir <= 75) {
                    progressBar.setForeground(Color.GREEN);
                }
                if (nilaiAkhir >= 26 && nilaiAkhir <= 50) {
                    progressBar.setForeground(Color.YELLOW);
                }
                if (nilaiAkhir >= 0 && nilaiAkhir <= 25) {
                    progressBar.setForeground(Color.RED);
                }
                succed = 0;
            }
        }).start();
    }//GEN-LAST:event_btn_VoCActionPerformed

    public ProgressBarDemo() {
        initComponents();
        jp_progress.setVisible(false);
        progressBar.setBackground(Color.WHITE);
        ActionListener listenerProgress = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            }
        };
        timerProgress = new Timer(0, listenerProgress);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Layanan;
    private javax.swing.JButton btn_AS;
    private javax.swing.JButton btn_VC;
    private javax.swing.JButton btn_VidS;
    private javax.swing.JButton btn_VoC;
    public javax.swing.JButton btn_WB;
    private progressbar.CustomPanel customPanel1;
    private progressbar.CustomPanel customPanel2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private progressbar.CustomPanel jp_progress;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

}
